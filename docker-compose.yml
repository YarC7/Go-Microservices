version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PRODUCT_SERVICE_URL=http://product-service:8080
      - ORDER_SERVICE_URL=http://order-service:8081
      - INVENTORY_SERVICE_URL=http://inventory-service:8082
      - NOTIFICATION_SERVICE_URL=http://notification-service:8083
      - PAYMENT_SERVICE_URL=http://payment-service:8084
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - notification-service
      - payment-service
    restart: on-failure
    networks:
      - microservices-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=product-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=canh177
      - DB_NAME=products_db
    depends_on:
      - product-db
    restart: on-failure
    networks:
      - microservices-network

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=order-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=canh177
      - DB_NAME=orders_db
      - INVENTORY_SERVICE_URL=http://inventory-service:8082
      - NOTIFICATION_SERVICE_URL=http://notification-service:8083
    depends_on:
      - order-db
      - inventory-service
      - notification-service
    restart: on-failure
    networks:
      - microservices-network

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: ./inventory-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=inventory-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=canh177
      - DB_NAME=inventory_db
    depends_on:
      - inventory-db
    restart: on-failure
    networks:
      - microservices-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - DB_HOST=notification-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=canh177
      - DB_NAME=notification_db
    depends_on:
      - notification-db
    restart: on-failure
    networks:
      - microservices-network

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: ./payment-service/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - DB_HOST=payment-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=canh177
      - DB_NAME=payment_db
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - payment-db
    restart: on-failure
    networks:
      - microservices-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - microservices-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - microservices-network

  # Product Database
  product-db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=canh177
      - POSTGRES_DB=products_db
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Order Database
  order-db:
    image: postgres:14-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=canh177
      - POSTGRES_DB=orders_db
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Inventory Database
  inventory-db:
    image: postgres:14-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=canh177
      - POSTGRES_DB=inventory_db
    volumes:
      - inventory-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Notification Database
  notification-db:
    image: postgres:14-alpine
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=canh177
      - POSTGRES_DB=notification_db
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Payment Database
  payment-db:
    image: postgres:14-alpine
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=canh177
      - POSTGRES_DB=payment_db
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

volumes:
  product-db-data:
  order-db-data:
  inventory-db-data:
  notification-db-data:
  payment-db-data:
  prometheus_data:
  grafana_data:
  redis_data:
  rabbitmq_data:

networks:
  microservices-network:
    driver: bridge 